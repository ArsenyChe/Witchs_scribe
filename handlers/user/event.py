from dotenv import load_dotenv
from os import getenv
from aiogram import Router, F
from aiogram.types import Message
from aiogram.client.bot import Bot
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode

from messages import TEXT_B_EVENT, TEXT_B_CONFIRM, TEXT_SUBSCRIBE, TEXT_RESTART_WARNING
from keyboards.button import choice_kb, main_kb
from filters.allowed_content_type import AllowedContentType


load_dotenv()
router = Router()
admin_username: list[str] = [getenv('ADMIN_USERNAME'), getenv('WITCH_USERNAME')]

class SendEvent(StatesGroup):
    music = State()
    massage = State()
    confirmation = State()
    
@router.message(F.text == TEXT_B_EVENT)
async def cmd_music_1(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(SendEvent.music)
    await message.answer(f'<pre>–í–µ–¥—å–º–∏–Ω –ø–∏—Å–∞—Ä—ä</pre> \n–ï—Å–ª–∏ —Å–µ—Ä–¥—Ü—É —Ç–≤–æ–µ–º—É —É–≥–æ–¥–Ω–æ, –ø—Ä–µ–¥–ª–æ–∂–∏ –º–µ–ª–æ–¥–∏—é –¥–ª—è –∫–æ–Ω—Ü–µ—Ä—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–π–¥–µ—Ç 01.12.2024. \n–ú–µ–ª–æ–¥–∏—è —Å–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å: \n1) –Ω–∞ —è–∑—ã–∫–µ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–º, –¥–∞–±—ã –≤–æ–ª—à–µ–±–Ω–∏—Ü–∞ –º–æ–≥–ª–∞ –µ—ë –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –ø–æ —Å–≤–æ–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é; \n2) –Ω–µ–∫—Ä–µ–ø–∫–æ –≤–æ–∫–∞–ª—å–Ω–∞—è, –¥–∞–±—ã –ª–µ—Å–Ω–∞—è –≤–µ–¥—å–º–∞ —Å—É–º–µ–ª–∞ –µ—ë –ø–æ—ç—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∏ —Å–ø–µ—Ç—å –≤–æ –≤—Ä–µ–º—è —Å–µ–≥–æ –∫–æ–Ω—Ü–µ—Ä—Ç–∞.\n\n–î–∞–±—ã –≤–æ–∑–Ω–µ—Å—Ç–∏ –º–µ–ª–æ–¥–∏—é, —É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∏—é –∫–æ–º–ø–æ–∑–∏—Ü–∏—é.\n\n{TEXT_RESTART_WARNING}', parse_mode=ParseMode.HTML, 
                         reply_markup=choice_kb())
    
@router.message(SendEvent.music, AllowedContentType(['text']))
async def cmd_music_2(message: Message, state: FSMContext):
    await state.update_data(music = message.text)
    await message.answer(f'<pre>–í–µ–¥—å–º–∏–Ω –ø–∏—Å–∞—Ä—ä</pre> \n–ü—Ä–∏–ª–æ–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å–µ–π –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏, –¥–∞–±—ã –º—ã –º–æ–≥–ª–∏ –≤–Ω—è—Ç—å –≤–∞—à–∏–º –º—ã—Å–ª—è–º –∏ —á—É–≤—Å—Ç–≤–∞–º, –ø–æ—Ä–æ–∂–¥–µ–Ω–Ω—ã–º –µ—é.', parse_mode=ParseMode.HTML,
                         reply_markup=choice_kb())

    await state.set_state(SendEvent.massage)

@router.message(SendEvent.massage, AllowedContentType(['text']))
async def cmd_music_3(message: Message, state: FSMContext):
    await state.update_data(massage = message.text)
    data = await state.get_data()
    await message.answer(f'<pre>–í–µ–¥—å–º–∏–Ω –ø–∏—Å–∞—Ä—ä</pre> \n–ñ–µ–ª–∞–µ—Ç–µ –ª–∏ –≤—ã –≤–æ–∑–Ω–µ—Å—Ç–∏ —Å–∏–µ —Å–ª–æ–≤–æ –≤ —Å–≤—è—Ç–æ–π –∫–∞–Ω–∞–ª "–ú—É–∑—ã–∫–∞ –¥–ª—è –∫–æ–Ω—Ü–µ—Ä—Ç–∞"? –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏–∑ —Å–ø–∏—Å–∫–∞.', parse_mode=ParseMode.HTML,
                         reply_markup=choice_kb(True))

    await message.answer(f'{data["music"]} \n{data["massage"]} \n\nüåº{message.from_user.full_name}üåº')

    await state.set_state(SendEvent.confirmation)

@router.message(F.text == TEXT_B_CONFIRM, SendEvent.confirmation)
async def cmd_music_4(message: Message, state: FSMContext, bot: Bot):
    user_channel_status = await bot.get_chat_member(chat_id= getenv('GROUP_MAIN'), user_id=message.from_user.id)

    if user_channel_status.status not in ['left','kicked']:
        await state.set_state(SendEvent.confirmation)
        data = await state.get_data()
        await bot.send_message(getenv('GROUP_EVENT'), f'{data["music"]} \n{data["massage"]} \n\nüåº{message.from_user.full_name}üåº')

        await message.answer(f'<pre>–í–µ–¥—å–º–∏–Ω –ø–∏—Å–∞—Ä—ä</pre> \n–°–ª–æ–≤–æ –≤–∞—à–µ —Å –ª—é–±–æ–≤—å—é –≤–æ–∑–Ω–µ—Å–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª "–ú—É–∑—ã–∫–∞ –¥–ª—è –∫–æ–Ω—Ü–µ—Ä—Ç–∞".', parse_mode=ParseMode.HTML, reply_markup=main_kb(message.from_user.username, admin_username))
    else:
        await message.answer(f'<pre>–í–µ–¥—å–º–∏–Ω –ø–∏—Å–∞—Ä—ä</pre> \n'+ TEXT_SUBSCRIBE, parse_mode=ParseMode.HTML, reply_markup=main_kb(message.from_user.username, admin_username))

    await state.clear()