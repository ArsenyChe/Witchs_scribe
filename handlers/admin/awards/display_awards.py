from data import database

from aiogram import Router, F
from aiogram.types import Message
from aiogram.enums import ParseMode
from messages import TEXT_B_AWARDS

router = Router()

@router.message(F.text == TEXT_B_AWARDS)
async def cmd_display_awards(message: Message):
    awards = await database.display_awards()
    response = "<pre>–í–µ–¥—å–º–∏–Ω –ø–∏—Å–∞—Ä—ä</pre> \n–ü–µ—Ä–µ–¥ –≤–∞–º–∏ —Å–≤–∏—Ç–æ–∫, –≥–¥–µ –∑–∞–ø–∏—Å–∞–Ω—ã –ø—Ä–æ—Å—å–±—ã –¥—É—à, –∂–∞–∂–¥—É—â–∏—Ö –ø–æ–º–æ—â–∏ –∏ –∑–∞–±–æ—Ç—ã. \n"
    check_award = None

    for award in awards:
        if award[2] != check_award:
            if response: 
                await message.answer(response, parse_mode=ParseMode.HTML)
                response = ""
            response += f'<pre>üçÇ {award[2]}</pre>\n'
            check_award = award[2]

        if award[5] != "":
            response += f'<pre>{award[0]}) {award[1]} –∏–∑—ä—è–≤–∏–ª(–∞) –∂–µ–ª–∞–Ω–∏–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É, –Ω–∞—Ä–µ—á–µ–Ω–Ω—É—é "{award[2]}", –∏–º–µ–Ω–µ–º "{award[5].strip()}" \n–í—Ä–µ–º—è —Å–∏–µ: {award[4]}, –°–æ—Å—Ç–æ—è–Ω–∏–µ: üéÉ</pre>\n'
        else:
            response += f'<pre>{award[0]}) {award[1]} –∏–∑—ä—è–≤–∏–ª(–∞) –∂–µ–ª–∞–Ω–∏–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É, –Ω–∞—Ä–µ—á–µ–Ω–Ω—É—é "{award[2]}" \n–í—Ä–µ–º—è —Å–∏–µ: {award[4]}, –°–æ—Å—Ç–æ—è–Ω–∏–µ: üéÉ</pre>\n'

    if response:
        await message.answer(response, parse_mode=ParseMode.HTML)
    